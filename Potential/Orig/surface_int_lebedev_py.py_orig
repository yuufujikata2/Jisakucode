import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from scipy.interpolate import RegularGridInterpolator
from scipy import interpolate
import quadpy
import time
import rasen
import sys

def grid (nx,ny,nz):
    x = np.linspace(-1,1,nx)
    y = np.linspace(-1,1,ny)
    z = np.linspace(-1,1,nz)
    return x,y,z

def cubic(pos):
    xx, yy, zz = np.meshgrid(pos[0],pos[1],pos[2])
    V = np.where( (abs(xx) <= 0.5) & (abs(yy) <= 0.5) & (abs(zz) <= 0.5), 1.,0.)
    return V

def cylinder(x,y,z):
    xx, yy, zz = np.meshgrid(x,y,z)
    rr = np.sqrt(xx**2 + yy**2)
    V = np.where((rr <= 0.3) & (abs(zz) <= 0.7), 1., 0.)
    return V

def fitting(r,V,d):
    w = np.polyfit(r,V,d)
    print(w)
    xs = np.linspace(r[0],r[-1],300)
    ys = np.polyval(w,xs)
    return xs,ys



def potentialshow(x,y,z,V):
    xx, yy, zz = np.meshgrid(x,y,z)
    xxindex = np.where(V == 1. )
    xx2 = xx[xxindex]
    yyindex = np.where(V == 1. )
    yy2 = yy[yyindex]
    zzindex = np.where(V == 1. )
    zz2 = zz[zzindex]

    fig = plt.figure()
    ax = fig.add_subplot(111,projection="3d")
    ax.scatter(xx2,yy2,zz2)
    plt.show()
    

def interpol(x,y,z,V,newpoint):
    my_inter_func = RegularGridInterpolator((x, y, z), V)
    return my_inter_func(newpoint)
    

def polargrid(dr):
    ntheta = 100
    nphi = 200
    coordx = np.zeros(nphi * (ntheta + 1) - 2 * (nphi - 1) )
    coordy = np.zeros(nphi * (ntheta + 1) - 2 * (nphi - 1) )
    coordz = np.zeros(nphi * (ntheta + 1) - 2 * (nphi - 1) )
    number = 0
    for phi in range (nphi):
        if phi == 0 :
            for theta in range (ntheta + 1):
                coordx[number] = dr * np.sin(np.pi / ntheta * theta) * np.cos(2 * np.pi / nphi *  phi )
                coordy[number] = dr * np.sin(np.pi / ntheta * theta) * np.sin(2 * np.pi / nphi *  phi )
                coordz[number] = dr * np.cos(np.pi / ntheta * theta) 
                number += 1

        else:
            for theta in range (1,ntheta):
                coordx[number] = dr * np.sin(np.pi / ntheta * theta) * np.cos(2 * np.pi / nphi *  phi )
                coordy[number] = dr * np.sin(np.pi / ntheta * theta) * np.sin(2 * np.pi / nphi *  phi )
                coordz[number] = dr * np.cos(np.pi / ntheta * theta) 
                number += 1
    coord = np.array([coordx,coordy,coordz])
    coord = coord.T
    return coord,number-1
   
def lebedev(dr,pos,V):
    scheme = quadpy.sphere.lebedev_131()
    myinterpo3d = RegularGridInterpolator(pos, V)
    val = scheme.integrate( myinterpo3d,[0.0,0.0,0.0],dr)
    return val



def main():
    fw = open("v.dat",mode="w")
    pos = grid(300,300,300)
  
    V = cubic(pos)
    #V = cylinder(x,y,z)
    #potentialshow(x,y,z,V)
    #sys.exit()

    r =np.linspace(0,1,300)
    npoints = 10000

    gss = rasen.generate_gss(npoints)
    relocated_gss = rasen.relocate(gss)

    V_all = []

    hyoujinumber = 0
    for dr in r:
        
       # coord = np.array([rasen.spherical2cartesian(c,dr) for c in gss])
        #coord,npoints = polargrid(dr)

        #hyoujinumber += 1
        
        #if hyoujinumber == 150:
        #    fig = plt.figure()
        #    ax = fig.add_subplot(111,projection="3d")
        #    ax.scatter(coord[:,0],coord[:,1],coord[:,2])
        #    plt.show()
        

        #newV = interpol(x,y,z,V,coord)
        """
        newV = np.zeros(npoints)
        for i in range(npoints):
            if abs(coord[i][0]) <= 0.5 and abs(coord[i][1]) <= 0.5 and abs(coord[i][2]) <= 0.5:
                newV[i] = 1.
            else:
                newV[i] = 0.
        """
        #V_average = np.average(newV)
        #V_all.append(V_average)
        
        V_lebedev = lebedev(dr,pos,V) / (4 * np.pi * dr**2)
        #print(V_lebedev)
        V_all.append(V_lebedev)
        fw.write("{:>11.6f}".format(dr))
        fw.write("{:>11.6f}".format(V_lebedev))
        fw.write("\n")
        
                
    fw.close()
    #plt.vlines(np.sqrt(2) / 2, 0,1)
    #plt.vlines(np.sqrt(3) / 2, 0,1)
    plt.plot(r,V_all,marker=".")
    #xs,ys = fitting(r,V_all,2)
    #plt.plot(xs,ys)
    plt.show()


if __name__ =="__main__":
    main()
